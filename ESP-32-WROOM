/// ----------------------------------------------------------------------------------------------------------------------------------------------------------- ///
/// ------------------------------------------------------------------- CODE ESP32-WROOM-32 ------------------------------------------------------------------- ///
/// -------------------------------------------------------------------- PROJET DRONE GPD1 -------------------------------------------------------------------- ///
/// ----------------------------------------------------------------------------------------------------------------------------------------------------------- ///



/// ---------------------------------------------------------------------- Bibliothèques ---------------------------------------------------------------------- ///


#include <Keypad.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <cmath>
#include <math.h>
#include <WiFi.h>
#include <WebSerial.h>
#include <ESPAsyncWebServer.h> // Pour AsyncWebServer
//#include <play_pretend20pt7b.h>


/// ---------------------------------------------------------------------- Définitions ---------------------------------------------------------------------- ///


// SDA & SCL
#define SDA_PIN 21
#define SCL_PIN 22

// Ecran OLED
#define SCREEN_I2C_ADDR 0x3C
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RST_PIN -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST_PIN);
#define FRAME_DELAY 42
#define FRAME_WIDTH 64
#define FRAME_HEIGHT 64
#define FRAME_COUNTpos (sizeof(framespos) / sizeof(framespos[0]))

// Moteurs, leds et channels de la radiocommande
#define PWM_PIN_1 18   // Pin pour ESC 1
#define PWM_PIN_2 19   // Pin pour ESC 2
#define PWM_PIN_3 2   // Pin pour ESC 3
#define PWM_PIN_4 23   // Pin pour ESC 4
#define PWM_PIN_OUT 34 // Pin pour le mode auto
#define SEQUENCE_PIN 35 // Pin pour déclencher la séquence
#define LED_RED 5      // LED rouge
#define LED_GREEN 4    // LED verte

// Fréquences et résolutions
#define ESC_PWM_FREQUENCY 50      // Fréquence PWM pour ESC (50 Hz)
#define LED_PWM_FREQUENCY 50     // Fréquence PWM pour LEDs (50 ou 500 Hz)
#define LED_PWM_RESOLUTION 255    // Résolution (0-255 pour la largeur d'impulsion)
#define PWM_PERIOD (1000000 / ESC_PWM_FREQUENCY) // Période en microsecondes pour ESC (20 ms)

// Keypad
const byte ROWS = 4; 
const byte COLS = 4; 
char hexaKeys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {13, 12, 14, 27}; 
byte colPins[COLS] = {26, 25, 33, 32};
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
String inputValue = ""; 
bool valueSaved = false; 

// Smiley sunglasses
int frame = 0;
const byte PROGMEM framespos[][512] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,1,131,255,255,128,1,255,255,255,255,255,255,224,3,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,224,15,255,255,254,127,255,255,224,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,15,255,255,252,63,255,255,176,29,255,255,252,63,255,255,184,29,255,255,252,63,255,255,56,25,255,255,252,31,255,255,24,24,255,255,248,31,255,254,24,24,127,255,248,15,255,252,24,24,63,255,240,7,255,240,24,24,15,255,192,1,255,192,24,24,3,255,0,0,62,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,255,254,0,0,15,4,3,207,255,255,224,0,31,255,255,255,255,255,240,1,255,255,255,255,255,255,240,7,255,255,252,127,255,255,192,15,255,255,252,127,255,255,192,15,255,255,254,127,255,255,128,7,255,255,254,127,255,255,128,3,255,255,254,127,255,255,192,3,255,255,254,63,255,255,192,7,255,255,252,63,255,255,224,7,255,255,252,63,255,255,224,15,255,255,252,63,255,255,112,15,255,255,252,31,255,254,112,12,255,255,248,15,255,252,112,12,127,255,248,7,255,240,48,28,63,255,240,3,255,224,56,28,31,255,224,1,255,0,56,24,7,255,192,3,252,0,24,24,0,63,192,3,252,0,24,24,0,63,128,1,252,0,24,24,0,31,128,1,248,0,24,24,0,15,0,0,240,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,227,254,0,0,0,31,224,7,255,255,224,0,0,127,7,223,255,255,224,0,1,255,255,255,255,255,224,0,127,255,254,255,255,255,192,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,127,255,255,128,3,255,255,254,63,255,255,128,3,255,255,252,63,255,255,128,1,255,255,252,63,255,255,128,3,255,255,252,63,255,255,192,3,255,255,252,31,255,253,192,7,255,255,248,15,255,248,224,7,255,255,248,7,255,240,224,14,127,255,240,1,255,128,112,14,31,255,224,0,8,0,112,12,7,255,128,0,0,0,112,12,0,254,0,0,96,0,48,28,0,31,128,1,248,0,56,28,0,63,128,1,252,0,56,24,0,63,192,3,252,0,24,24,0,63,192,3,252,0,24,24,0,63,128,1,252,0,24,24,0,31,128,1,248,0,24,24,0,15,0,0,240,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,96,0,48,28,0,31,128,1,248,0,56,28,0,63,128,1,252,0,56,24,0,63,192,3,252,0,24,24,0,63,192,3,252,0,24,24,0,63,128,1,252,0,24,24,0,31,128,1,248,0,24,24,0,15,0,0,240,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,96,0,48,28,0,31,128,1,248,0,56,28,0,63,128,1,252,0,56,24,0,63,192,3,252,0,24,24,0,63,192,3,252,0,24,24,0,63,128,1,252,0,24,24,0,31,128,1,248,0,24,24,0,15,0,0,240,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,1,252,0,56,24,0,63,192,3,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,3,252,0,24,24,0,31,128,0,112,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,24,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,56,63,240,7,0,0,240,0,127,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,0,0,0,56,24,0,63,192,1,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,0,0,0,24,24,0,31,128,0,0,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,6,56,28,0,0,0,0,0,14,56,28,0,0,0,0,0,28,56,12,0,0,0,0,0,28,48,14,0,0,0,0,0,56,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,0,1,248,3,128,0,224,0,0,63,240,7,0,0,240,0,15,255,192,14,0,0,120,0,15,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,192,0,0,0,127,255,255,255,224,0,0,7,255,255,255,255,224,0,0,63,255,255,255,255,224,0,7,255,255,255,255,255,192,0,255,255,252,127,255,255,128,3,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,31,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,7,255,255,254,63,255,255,128,3,255,255,252,63,255,255,0,3,255,255,252,63,255,255,0,1,255,255,252,31,255,255,0,1,255,255,252,31,255,255,128,3,255,255,252,15,255,249,192,3,255,255,248,7,255,225,192,7,127,255,248,1,255,128,224,7,63,255,224,0,0,0,224,14,31,255,192,0,0,0,112,14,7,255,0,0,0,0,112,12,0,0,0,0,0,0,112,12,0,6,0,0,0,0,48,28,0,31,128,0,0,0,56,28,0,63,128,1,252,0,56,24,0,63,192,3,252,0,24,24,0,63,192,3,254,0,24,24,0,63,128,3,252,0,24,24,0,31,128,0,112,0,24,24,0,15,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,16,48,14,0,0,0,0,0,48,112,14,0,0,0,0,0,112,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,224,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,0,0,0,62,1,192,1,192,0,192,1,248,3,128,0,224,0,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,31,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,63,255,128,0,15,0,0,3,255,255,224,0,30,15,7,255,255,255,224,0,63,255,255,255,255,255,224,0,255,255,252,127,255,255,192,7,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,15,255,255,252,127,255,255,128,15,255,255,252,127,255,255,192,7,255,255,254,127,255,255,192,7,255,255,254,63,255,255,224,7,255,255,252,63,255,255,224,15,255,255,252,63,255,255,112,15,255,255,252,31,255,254,112,13,255,255,252,15,255,252,112,12,255,255,248,15,255,248,48,28,127,255,248,7,255,224,56,28,63,255,240,1,255,0,56,24,31,255,192,3,252,0,24,24,7,255,192,3,252,0,24,24,0,63,128,1,252,0,24,24,0,31,128,1,248,0,24,24,0,15,0,0,240,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,255,255,128,3,128,4,3,207,255,255,224,3,143,255,255,255,255,255,240,7,255,255,255,255,255,255,240,7,255,255,252,127,255,255,224,15,255,255,252,127,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,63,255,255,184,31,255,255,252,63,255,255,184,25,255,255,252,63,255,255,24,25,255,255,252,63,255,255,24,25,255,255,252,31,255,254,24,24,255,255,248,15,255,252,24,24,127,255,248,7,255,240,24,24,63,255,240,3,255,224,24,24,31,255,224,0,127,0,24,24,7,255,128,0,0,0,24,24,0,0,0,0,0,0,24,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,14,0,0,0,0,0,0,112,14,0,127,3,199,255,255,240,14,255,255,255,255,255,255,240,15,255,255,255,255,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,216,31,255,255,254,127,255,255,216,27,255,255,254,127,255,255,152,27,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,24,25,255,255,252,31,255,255,24,24,255,255,248,31,255,254,24,28,127,255,248,15,255,248,56,28,63,255,240,7,255,240,56,28,15,255,192,1,255,192,56,12,3,255,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,14,0,0,0,0,0,0,112,14,0,0,0,0,0,0,112,12,0,0,0,0,0,0,112,12,3,255,1,128,255,192,48,31,255,255,255,255,255,255,248,31,255,255,255,255,255,255,248,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,28,255,255,252,63,255,255,56,28,255,255,248,31,255,255,56,28,127,255,248,31,255,254,56,12,31,255,240,15,255,248,48,14,7,255,224,7,255,224,112,14,0,255,0,0,255,192,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,7,255,255,224,0,0,0,0,31,224,7,248,0,0,0,0,126,0,0,126,0,0,0,0,248,0,0,31,0,0,0,1,224,0,0,7,128,0,0,7,128,0,0,1,224,0,0,15,0,0,0,0,240,0,0,30,0,0,0,0,120,0,0,60,0,0,0,0,60,0,0,120,0,0,0,0,30,0,0,240,0,0,0,0,15,0,0,224,0,0,0,0,7,0,1,192,0,0,0,0,3,128,3,128,0,0,0,0,1,192,3,128,0,0,0,0,1,192,7,0,0,0,0,0,0,224,7,0,0,0,0,0,0,224,15,255,255,247,239,255,255,240,15,255,255,255,255,255,255,240,15,255,255,254,127,255,255,240,15,255,255,254,127,255,255,240,31,255,255,254,127,255,255,248,31,255,255,254,127,255,255,248,27,255,255,254,127,255,255,216,27,255,255,254,127,255,255,216,25,255,255,254,127,255,255,152,25,255,255,252,63,255,255,152,25,255,255,252,63,255,255,152,24,255,255,252,63,255,255,24,24,255,255,248,31,255,255,24,24,127,255,248,31,255,254,24,24,63,255,240,15,255,252,24,28,15,255,224,7,255,240,56,28,3,255,128,1,255,192,56,28,0,0,0,0,0,0,56,12,0,0,0,0,0,0,48,14,0,0,0,0,0,0,112,14,0,0,0,0,0,64,112,14,0,0,0,0,0,224,112,7,0,0,0,0,1,192,224,7,0,0,0,0,7,192,224,3,128,0,0,0,15,1,192,3,128,3,0,0,62,1,192,1,192,3,128,1,248,3,128,0,224,3,248,63,240,7,0,0,240,0,255,255,192,14,0,0,120,0,63,254,0,30,0,0,60,0,0,0,0,60,0,0,30,0,0,0,0,120,0,0,15,0,0,0,0,240,0,0,7,128,0,0,1,224,0,0,3,224,0,0,7,192,0,0,0,248,0,0,31,0,0,0,0,126,0,0,126,0,0,0,0,31,224,7,248,0,0,0,0,3,255,255,192,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

const float hauteur_du_vol = 0.7;
const float hauteur_au_sol = 0.3;
const float position_x_depart = 2.0;
const float position_y_depart = 0.0;

// Points de passage initiaux pour le parcours imposé
float A_z = hauteur_au_sol;  // Position du point A
float A_y = position_y_depart;  // Position du point A
float A_x = position_x_depart;  // Position du point A
float B_z = hauteur_du_vol; // Position du point B
float B_y = position_y_depart;  // Position du point B
float B_x = position_x_depart;  // Position du point B
float C_z = hauteur_du_vol; // Position du point C
float C_y = position_y_depart;  // Position du point C
float C_x = 0.0;  // Position du point C
float D_z = hauteur_au_sol;  // Position du point D
float D_y = position_y_depart;  // Position du point D
float D_x = 0.0;  // Position du point D

// Constantes pour la gestion du vol
const float radius_checkpoint = 0.50; // Rayon des sphères autour de A et B
const float V_min = 1200; // Valeur PWM pour la vitesse max de descente
const float V_neutre = 1240; // Valeur PWM pour la vitesse stabilisée
const float V_max = 1340; //1400; // Valeur PWM pour la vitesse max de montée
const int duree_stabilisation = 10000; // Durée de stabilisation en micro secondes
float distancecouloirvolx = 0.0;
float distancecouloirvoly = 0.0;
const float V_reelle = 0.1;
const float V_reelle_stab = 0.01;

// PID vertical
const int Kp = 30;
float erreur = 0.0;

// PID horizontal
float erreurU = 0.0;
float erreurV = 0.0;          
float U = 0.0;
float V = 0.0;
int KpU = 1;
int KpV = 1;

// Gestion des etats
enum Phase {
    START,
    PHASE_1,
    STABILIZE_AT_B,
    PHASE_2,
    STABILIZE_AT_C,
    PHASE_3,
    STOP
};

// Autres variables
Phase currentPhase = START; // État initial
bool missionComplete = false; // Drapeau global pour indiquer la fin de la mission
float xmes = 0.0, ymes = 0.0, zmes = 0.0, thetames = 0.0, phimes = 0.0, xmesn = 0.0, ymesn = 0.0, zmesn = 0.0;
bool Autorisation_preparation_decollage = false;
bool Preparation_decollage = false;
float Distance;
bool Ne_pas_executer_la_phase_2 = false;
int valeurRecue = 0; // Variable pour stocker la valeur reçue
int ledRedDutyCycle = 0;   // Duty cycle pour la LED rouge
int ledGreenDutyCycle = 0; // Duty cycle pour la LED verte
bool ledState = false;     // Ã‰tat de la LED verte pour le clignotement
String ligne = "";
int etatSaisie = 0; // 0 = message d'attente, 1 = saisie en cours, 2 = saisie validée
unsigned long startTime; // Variable globale pour stocker le temps de départ
bool stabilisationEnCours = false; // Indicateur d'état de stabilisation
const float rayon_couloir_de_vol = 0.2;
static bool conditionMet = false;
int pwm_output = V_neutre;
float pwm_output_theta_degres = 0.0;
float pwm_output_phi_degres = 0.0;
float pwm_output_theta = 0.0;
float pwm_output_phi = 0.0;
unsigned long previousTime = 0; // en microsecondes par exemple
float dt = 0.0;
float alpha = 0.0;
float zcons = 0.0;

// Vos identifiants WiFi
const char* ssid = "Joachim";
const char* password = "christa2";

// Création d'un serveur WiFi sur le port 80
AsyncWebServer server(80); // Création d'un serveur async sur le port 80


/// ---------------------------------------------------------------------- Fonctions ---------------------------------------------------------------------- ///


// Mise à jour de l'écran OLED
void updateDisplay(String message) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println(message);
    display.display();
}


// Smiley écran OLED
void showSmileyFace() {
    unsigned long startTime = millis(); // Temps de départ
    while (millis() - startTime < 5000) { // Boucle pendant 5 secondes
        display.clearDisplay();
        display.drawBitmap(32, 0, framespos[frame], FRAME_WIDTH, FRAME_HEIGHT, 1);
        display.display();
        frame = (frame + 1) % FRAME_COUNTpos;
        delay(FRAME_DELAY);
    }
    display.clearDisplay();
}


// Signal PWM pour la poussée
void generatePWM(int pin, int pulseWidthMicros) {
    digitalWrite(pin, HIGH);
    delayMicroseconds(pulseWidthMicros); // Maintenir à HIGH pendant la largeur d'impulsion
    digitalWrite(pin, LOW);
    delayMicroseconds(PWM_PERIOD - pulseWidthMicros); // Compléter le cycle
}


// Signal PWM pour les angles
void generatePWMangle(int pin, int angle) {
    const int NEUTRAL_WIDTH_MICROS = 1500; // Valeur neutre à 1500 microsecondes
    const int MIN_WIDTH_MICROS = 1000; // Largeur minimale à 1000 microsecondes
    const int MAX_WIDTH_MICROS = 2000; // Largeur maximale à 2000 microsecondes
    const float MIN_ANGLE = -10.0; // Angle minimum en degrés
    const float MAX_ANGLE = 10.0; // Angle maximum en degrés
    if (abs(angle) > 10) {
      angle = 10;
    }
    int pulseWidthMicros = map((int)(angle * 1000), (int)(MIN_ANGLE*1000), (int)(MAX_ANGLE*1000), MIN_WIDTH_MICROS, MAX_WIDTH_MICROS);
    // Limiter la largeur d'impulsion pour éviter les dépassements de bornes
    pulseWidthMicros = constrain(pulseWidthMicros, MIN_WIDTH_MICROS, MAX_WIDTH_MICROS);
    // Inversion de la consigne pour PWM_PIN_2
    if (pin == PWM_PIN_2) {
        pulseWidthMicros = MIN_WIDTH_MICROS + MAX_WIDTH_MICROS - pulseWidthMicros;
    }
    pulseWidthMicros = (int) ceil(pulseWidthMicros);
    digitalWrite(pin, HIGH);
    delayMicroseconds(pulseWidthMicros); // Maintenir à HIGH pendant la largeur d'impulsion
    digitalWrite(pin, LOW);
    delayMicroseconds(PWM_PERIOD - pulseWidthMicros); // Compléter le cycle
    WebSerial.print("Valeur d'angle pour le pin ");
    WebSerial.println(pin);
    WebSerial.println(pulseWidthMicros);
    Serial.print("Valeur d'angle pour le pin ");
    Serial.println(pin);
    Serial.println(pulseWidthMicros);
}


// Signal PWM pour les leds
void generatePWMLed(int pin, int dutyCycle) {
    int pulseWidthMicros = (1000000 / LED_PWM_FREQUENCY) * dutyCycle / LED_PWM_RESOLUTION;
    int offTime = (1000000 / LED_PWM_FREQUENCY) - pulseWidthMicros;
    digitalWrite(pin, HIGH);
    delayMicroseconds(pulseWidthMicros); // Maintenir HIGH pour la durée du duty cycle
    digitalWrite(pin, LOW);
    delayMicroseconds(offTime); // Compléter le cycle LOW
}


// Lecture signal PWM en entrée
uint16_t readPWM(int pin) {
    return pulseIn(pin, HIGH, PWM_PERIOD); // Lire la durée HIGH en µs
}


void checkEmergencyStop() {
    static unsigned long startTime = 0; // Variable statique pour mémoriser le début de la détection
    static bool conditionMet = false;   // Indicateur pour savoir si la condition est remplie
    uint16_t autoSignal = readPWM(PWM_PIN_OUT);
    uint16_t sequenceSignal = readPWM(SEQUENCE_PIN);
    if (autoSignal <= 1200 || sequenceSignal <= 1200) {
        if (!conditionMet) {
            startTime = millis(); // On enregistre le temps de début
            conditionMet = true;  // On marque que la condition est remplie
        } else if (millis() - startTime >= 500) { // On vérifie si la condition est restée vraie pendant au moins 500 ms
            Serial.println("Signal d'arrêt détecté. Activation de la LED rouge.");
            WebSerial.println("Signal d'arrêt détecté. Activation de la LED rouge.");
            ledRedDutyCycle = 255; // Activer la LED rouge à pleine intensité
            ledGreenDutyCycle = 0; // Désactiver la LED verte
            // Boucle infinie simulant l'arrêt d'urgence
            while (true) {
                generatePWMLed(LED_RED, ledRedDutyCycle);
                generatePWMLed(LED_GREEN, ledGreenDutyCycle);
            }
        }
    } else {
        conditionMet = false; // Réinitialiser si la condition n'est plus remplie
    }
}


void Demarrage() {
    for (int pulseWidth = 1000; pulseWidth <= V_neutre; pulseWidth++) {
        checkEmergencyStop();
        generatePWM(PWM_PIN_3, pulseWidth);
        generatePWMLed(LED_GREEN, ledGreenDutyCycle);
    }
}


void Phase_1() {
    alpha = sign(B_z - zmes);
    zcons = zcons + alpha*dt*V_reelle;
    if (alpha == 1) {
      zcons = max(zcons, B_z);
    }
    else if (alpha == -1) {
      zcons = min(zcons, B_z);
    }
    erreur = zcons - zmes;
    pwm_output = (int) ceil(V_neutre + Kp*erreur);
    if (pwm_output > V_max) {
      pwm_output = V_max;
    }
    generatePWM(PWM_PIN_3, pwm_output);
    erreurU = A_x - xmes;
    erreurV = A_y - ymes;          
    U = KpU*erreurU;
    V = KpV*erreurV;
    pwm_output_theta = atan(U);
    pwm_output_theta_degres = pwm_output_theta * 180.0/PI;
    pwm_output_phi = -atan(V*cos(pwm_output_theta));
    pwm_output_phi_degres = pwm_output_phi * 180.0/PI;
    generatePWMangle(PWM_PIN_2, pwm_output_theta_degres);
    generatePWMangle(PWM_PIN_1, pwm_output_phi_degres);
    Serial.print("Pousée : ");
    Serial.println(pwm_output);
    Serial.print("Erreurs angles");
    Serial.print(erreurU);
    Serial.print(" ; ");
    Serial.println(erreurV);
    Serial.print("Angles : ");
    Serial.print(pwm_output_theta_degres);
    Serial.print(" ; ");
    Serial.println(pwm_output_phi_degres);
    checkEmergencyStop(); 
}


void debutStabilisation() {
    startTime = millis(); 
    stabilisationEnCours = true; 
}


void Stabilisation_phase_1() {
    // Vérifie si on doit encore stabiliser
    if (!stabilisationEnCours) return;
    // Vérification du temps écoulé
    if (millis() - startTime < duree_stabilisation) {
        alpha = sign(B_z - zmes);
        zcons = zcons + alpha*dt*V_reelle_stab;
        if (alpha == 1) {
          zcons = max(zcons, B_z);
        }
        else if (alpha == -1) {
          zcons = min(zcons, B_z);
        }
        erreur = zcons - zmes;
        pwm_output = (int) ceil(V_neutre + Kp*erreur);
        if (alpha == 1) {
          if (pwm_output > V_max) {
             pwm_output = V_max;
          }
        }
        if (alpha == -1) {
          if (pwm_output < V_min) {
             pwm_output = V_min;
          }
        }
        generatePWM(PWM_PIN_3, pwm_output);
        erreurU = B_x - xmes;
        erreurV = B_y - ymes;          
        U = KpU*erreurU;
        V = KpV*erreurV;
        pwm_output_theta = atan(U);
        pwm_output_theta_degres = pwm_output_theta * 180.0/PI;
        pwm_output_phi = -atan(V*cos(pwm_output_theta));
        pwm_output_phi_degres = pwm_output_phi * 180.0/PI;
        generatePWMangle(PWM_PIN_2, pwm_output_theta_degres);
        generatePWMangle(PWM_PIN_1, pwm_output_phi_degres);
        Serial.print("Pousée : ");
        Serial.println(pwm_output);
        Serial.print("Erreurs angles");
        Serial.print(erreurU);
        Serial.print(" ; ");
        Serial.println(erreurV);
        Serial.print("Angles : ");
        Serial.print(pwm_output_theta_degres);
        Serial.print(" ; ");
        Serial.println(pwm_output_phi_degres);
        checkEmergencyStop(); 
    } else {
        // Durée de stabilisation écoulée
        stabilisationEnCours = false;
        Serial.println("Stabilisation terminée");
    }
}


// Phase de vol horizontal
void Phase_2(){ 
    alpha = sign(C_z - zmes);
    zcons = zcons + alpha*dt*V_reelle;
    if (alpha == 1) {
      zcons = max(zcons, C_z);
    }
    else if (alpha == -1) {
      zcons = min(zcons, C_z);
    }
    erreur = zcons - zmes;
    pwm_output = (int) ceil(V_neutre + Kp*erreur);
    if (alpha == 1) {
      if (pwm_output > V_max) {
         pwm_output = V_max;
      }
    }
    if (alpha == -1) {
      if (pwm_output < V_min) {
         pwm_output = V_min;
      }
    }
    generatePWM(PWM_PIN_3, pwm_output);
    erreurU = C_x - xmes;
    erreurV = C_y - ymes;          
    U = KpU*erreurU;
    V = KpV*erreurV;
    pwm_output_theta = atan(U);
    pwm_output_theta_degres = pwm_output_theta * 180.0/PI;
    pwm_output_phi = -atan(V*cos(pwm_output_theta));
    pwm_output_phi_degres = pwm_output_phi * 180.0/PI;
    generatePWMangle(PWM_PIN_2, pwm_output_theta_degres);
    generatePWMangle(PWM_PIN_1, pwm_output_phi_degres);
    Serial.print("Pousée : ");
    Serial.println(pwm_output);
    Serial.print("Erreurs angles");
    Serial.print(erreurU);
    Serial.print(" ; ");
    Serial.println(erreurV);
    Serial.print("Angles : ");
    Serial.print(pwm_output_theta_degres);
    Serial.print(" ; ");
    Serial.println(pwm_output_phi_degres);
    checkEmergencyStop(); 
}


void Stabilisation_phase_2() {
    // Vérifie si on doit encore stabiliser
    if (!stabilisationEnCours) return;
    // Vérification du temps écoulé
    if (millis() - startTime < duree_stabilisation) {
        alpha = sign(C_z - zmes);
        zcons = zcons + alpha*dt*V_reelle_stab;
        if (alpha == 1) {
          zcons = max(zcons, C_z);
        }
        else if (alpha == -1) {
          zcons = min(zcons, C_z);
        }
        erreur = zcons - zmes;
        pwm_output = (int) ceil(V_neutre + Kp*erreur);
        if (alpha == 1) {
          if (pwm_output > V_max) {
             pwm_output = V_max;
          }
        }
        if (alpha == -1) {
          if (pwm_output < V_min) {
             pwm_output = V_min;
          }
        }
        generatePWM(PWM_PIN_3, pwm_output);
        erreurU = C_x - xmes;
        erreurV = C_y - ymes;          
        U = KpU*erreurU;
        V = KpV*erreurV;
        pwm_output_theta = atan(U);
        pwm_output_theta_degres = pwm_output_theta * 180.0/PI;
        pwm_output_phi = -atan(V*cos(pwm_output_theta));
        pwm_output_phi_degres = pwm_output_phi * 180.0/PI;
        generatePWMangle(PWM_PIN_2, pwm_output_theta_degres);
        generatePWMangle(PWM_PIN_1, pwm_output_phi_degres);
        Serial.print("Pousée : ");
        Serial.println(pwm_output);
        Serial.print("Erreurs angles");
        Serial.print(erreurU);
        Serial.print(" ; ");
        Serial.println(erreurV);
        Serial.print("Angles : ");
        Serial.print(pwm_output_theta_degres);
        Serial.print(" ; ");
        Serial.println(pwm_output_phi_degres);
        checkEmergencyStop(); 
    } else {
        // Durée de stabilisation écoulée
        stabilisationEnCours = false;
        Serial.println("Stabilisation terminée");
    }
}


// Phase d'atterrissage
void Phase_3() {
    alpha = sign(D_z - zmes);
    zcons = zcons + alpha*dt*V_reelle;
    if (alpha == 1) {
      zcons = max(zcons, D_z);
    }
    else if (alpha == -1) {
      zcons = min(zcons, D_z);
    }
    erreur = zcons - zmes;
    pwm_output = (int) ceil(V_neutre + Kp*erreur);
    if (pwm_output < V_min) {
      pwm_output = V_min;
    }
    generatePWM(PWM_PIN_3, pwm_output);
    erreurU = D_x - xmes;
    erreurV = D_y - ymes;          
    U = KpU*erreurU;
    V = KpV*erreurV;
    pwm_output_theta = atan(U);
    pwm_output_theta_degres = pwm_output_theta * 180.0/PI;
    pwm_output_phi = -atan(V*cos(pwm_output_theta));
    pwm_output_phi_degres = pwm_output_phi * 180.0/PI;
    generatePWMangle(PWM_PIN_2, pwm_output_theta_degres);
    generatePWMangle(PWM_PIN_1, pwm_output_phi_degres);
    Serial.print("Pousée : ");
    Serial.println(pwm_output);
    Serial.print("Erreurs angles");
    Serial.print(erreurU);
    Serial.print(" ; ");
    Serial.println(erreurV);
    Serial.print("Angles : ");
    Serial.print(pwm_output_theta_degres);
    Serial.print(" ; ");
    Serial.println(pwm_output_phi_degres);
    checkEmergencyStop(); 
}


int sign(float x) {
    if (x >= 0) return 1;
    else if (x < 0) return -1;
    else return 0;
}


// Arrêt des moteurs
void Arret() {
    for (int pulseWidth = V_neutre; pulseWidth >= 1000; pulseWidth--) {
        checkEmergencyStop();
        generatePWM(PWM_PIN_3, pulseWidth);
        generatePWMLed(LED_GREEN, ledGreenDutyCycle);
    }
}


// Fonction de callback pour WebSerial
void recvMsg(uint8_t *data, size_t len) {
  // Ici vous gérez les données reçues via WebSerial
  Serial.print("Reçu sur WebSerial: ");
  for (size_t i = 0; i < len; i++) {
    Serial.write(data[i]);
  }
  Serial.println();
}


/// -------------------------------------------------------------------- Boucle principale -------------------------------------------------------------------- ///


void setup() {
    // Initialisation de la communication série
    Serial.begin(115200);
    Serial2.begin(115200, SERIAL_8N1, 16, 17);
    Wire.begin(SDA_PIN, SCL_PIN); 
    WebSerial.println("Setup started.");
    Serial.println("Setup started.");
    delay(5000);
  
    // Configuration des broches ESC comme sortie
    pinMode(PWM_PIN_1, OUTPUT); //AIL (Roulis)
    pinMode(PWM_PIN_2, OUTPUT); //ELE (Tangage)
    pinMode(PWM_PIN_3, OUTPUT); //THR (Poussée)
    pinMode(PWM_PIN_4, OUTPUT); //RUD (Lacet)
    pinMode(PWM_PIN_OUT, INPUT);   // Mode auto
    pinMode(SEQUENCE_PIN, INPUT); // Armement
    pinMode(LED_RED, OUTPUT);     // Led rouge
    pinMode(LED_GREEN, OUTPUT);   // Led verte
    WebSerial.println("Pins configurés. Prêt au départ !");
    Serial.println("Pins configurés. Prêt au départ !");

    // Connexion WiFi en mode station
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    //display.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDR);

    // Attente de la connexion WiFi
    if (WiFi.waitForConnectResult() != WL_CONNECTED) {
        Serial.println("Échec de la connexion WiFi !");
        return;
    }
    Serial.print("Adresse IP: ");
    Serial.println(WiFi.localIP());
    
    // Initialisation de WebSerial
    WebSerial.begin(&server);  // passer le serveur créé
    WebSerial.onMessage(recvMsg);

    server.begin();
    WebSerial.println("Hello from ESP!");
  
//    display.setFont(&play_pretend20pt7b);
//    display.setTextSize(0.5);
    display.clearDisplay();
    display.display();
    inputValue = "";

//    display.setFont(NULL);          // Police par défaut (6×8 pixels)
//    display.setTextSize(1);         // Pas de mise à l'échelle supplémentaire (texte normal)
//    display.setTextColor(SSD1306_WHITE);
//    display.clearDisplay();
//    display.setCursor(0, 0);
//    display.display();
//    inputValue = "";
    updateDisplay("Bonjour ! \nPret a embarquer ?\n");
}

void loop() {
    unsigned long currentTime = micros();
    dt = (currentTime - previousTime) / 1000000.0; // Conversion en secondes
    previousTime = currentTime;
  
    // Lecture du signal sur PWM_PIN_OUT
    uint16_t autoSignal = pulseIn(PWM_PIN_OUT, HIGH, 25000); // Mesure impulsion haute sur 25ms max
  
    // Lecture du signal sur SEQUENCE_PIN
    uint16_t sequenceSignal = pulseIn(SEQUENCE_PIN, HIGH, 25000); // Idem mais sur SEQUENCE_PIN

    // Lecture des données UART de la position
    while (Serial2.available() > 0) {
      char c = (char)Serial2.read();
      if (c == '\n') {
        // On a reçu une ligne complète, par ex: "1.50,2.20,3.40"
        // Découpage de la ligne sur les virgules
        int firstComma = ligne.indexOf(',');
        int secondComma = ligne.indexOf(',', firstComma + 1);
  
        if (firstComma > 0 && secondComma > 0) {
          String xStr = ligne.substring(0, firstComma);
          String yStr = ligne.substring(firstComma + 1, secondComma);
          String zStr = ligne.substring(secondComma + 1);
  
          xmes = xStr.toFloat();
          ymes = yStr.toFloat();
          zmes = zStr.toFloat();
  
          WebSerial.println("Valeurs reçues pour dt :");
          WebSerial.print("dt = "); WebSerial.println(dt, 2);
          WebSerial.print("X = "); WebSerial.println(xmes, 2);
          WebSerial.print("Y = "); WebSerial.println(ymes, 2);
          WebSerial.print("Z = "); WebSerial.println(zmes, 2);

          Serial.println("Valeurs reçues :");
          Serial.print("X = "); Serial.println(xmes, 2);
          Serial.print("Y = "); Serial.println(ymes, 2);
          Serial.print("Z = "); Serial.println(zmes, 2);
          
        } else {
          WebSerial.println("Erreur : la ligne ne contient pas les virgules attendues.");
          Serial.println("Erreur : la ligne ne contient pas les virgules attendues.");
        }
  
        // Réinitialisation de la ligne pour la prochaine réception
        ligne = "";
      } else if (c != '\r') {
        // Accumuler les caractères (ignorer '\r')
        ligne += c;
      }
    }
    
    if (autoSignal >= 1500 && Autorisation_preparation_decollage == false) {
        switch (etatSaisie) {
            case 0:{ // État d'affichage initial
                display.clearDisplay();
                updateDisplay("Mode automatique \ndetecte.\n");
                updateDisplay("Veuillez indiquer \nla distance \na parcourir...\n");
                
                ledRedDutyCycle = 255; // LED rouge à pleine intensité
                ledGreenDutyCycle = 0; // LED verte éteinte
                generatePWMLed(LED_RED, ledRedDutyCycle);
                generatePWMLed(LED_GREEN, ledGreenDutyCycle);
                
                etatSaisie = 1; // Passer à l'état de saisie
                break;
            }
            case 1:{ // Saisie de la distance
                char key = customKeypad.getKey();
                if (key) {
                    if (key >= '0' && key <= '9') { 
                        // Ajout du chiffre à la saisie
                        inputValue += key;
                        display.clearDisplay(); // On efface pour afficher la nouvelle valeur
                        updateDisplay("Saisissez la distance :\n" + inputValue);
                        delay(100); // Petit délai pour éviter le double appui
                    } else if (key == 'A') {
                        // Réinitialisation de la saisie
                        inputValue = "";
                        etatSaisie = 0; // Revenir à l'état d'affichage initial
                    } else if (key == 'D') {
                        // Validation de la saisie
                        if (inputValue.length() > 0) {
                            Distance = inputValue.toFloat(); // Convertir la distance en float
                            display.clearDisplay();
                            updateDisplay("Valeur enregistree :\n" + inputValue);
                            delay(1000);
                            showSmileyFace();
                            etatSaisie = 2; // Passer à l'étape suivante
                        }
                    }
                }
                break;
            }
            case 2: { // Préparation au décollage
                display.clearDisplay();
                updateDisplay("Debut de la preparation au vol.\nVeuillez vous ecarter du drone et armer le.");
                Autorisation_preparation_decollage = true;
                delay(2000);
                break;
            }
        }
    }

    // Recalcul du plan de vol
    if (Autorisation_preparation_decollage == true && Preparation_decollage == false) {
        ledRedDutyCycle = 255; // LED rouge à pleine intensité
        ledGreenDutyCycle = 0; // LED verte éteinte
        generatePWMLed(LED_RED, ledRedDutyCycle);
        generatePWMLed(LED_GREEN, ledGreenDutyCycle);
        
        // Recalcul des coordonnées
        C_x = Distance;
        D_x = Distance;
        
        if (C_x == 0 && D_x == 0){
          Ne_pas_executer_la_phase_2 = true;
        }
        display.clearDisplay();
        inputValue = "";
        updateDisplay("Recalcul du plan de vol...\n");
        delay(5000);
        Preparation_decollage = true;
    }

    // Indication pour prévenir que le drone est prêt à partir
    if (Autorisation_preparation_decollage == true && Preparation_decollage == true) {
        ledRedDutyCycle = 0; // LED rouge éteinte
        ledGreenDutyCycle = 255; // LED verte à pleine intensité
        generatePWMLed(LED_RED, ledRedDutyCycle);
        generatePWMLed(LED_GREEN, ledGreenDutyCycle);

        display.clearDisplay();
        inputValue = "";
        updateDisplay("Pret au decollage \nCap'tain !\n");
    }
       
    // Vol automatique    
    if (Autorisation_preparation_decollage == true && Preparation_decollage == true && sequenceSignal > 1500) {
        //checkEmergencyStop();
        if (!missionComplete) {
          switch (currentPhase) {
              case START:
                  Demarrage();
                  currentPhase = PHASE_1;
                  break;
              case PHASE_1:
                  WebSerial.println("Phase 1");
                  Serial.println("Phase 1");
                  Phase_1();
                  if (abs(zmes - hauteur_du_vol) <= 0.1) {
                      currentPhase = STABILIZE_AT_B;
                      Serial.println("Fin de la phase 1");
                      debutStabilisation();
                  }
                  break;
              case STABILIZE_AT_B:
                  WebSerial.println("Vol stationnaire...");
                  Serial.println("Vol stationnaire...");
                  Stabilisation_phase_1();  // Appel à chaque itération
                  // Ne changez de phase que lorsque la stabilisation est terminée
                  if (!stabilisationEnCours) {
                      Serial.println("Fin de la stabilisation à B");
                      currentPhase = PHASE_2;
                  }
                  break;
              case PHASE_2:
                  if (Ne_pas_executer_la_phase_2 == true) {
                      currentPhase = PHASE_3;
                      break;
                  } else {
                      WebSerial.println("Phase 2...");
                      Serial.println("Phase 2...");
                      Phase_2();
                      if (abs(xmes - Distance) <= 0.1) {
                          currentPhase = STABILIZE_AT_C;
                          debutStabilisation();
                      }
                  }   
                  break;
              case STABILIZE_AT_C:
                  WebSerial.println("Vol stationnnaire...");
                  Serial.println("Vol stationnaire...");
                  Stabilisation_phase_2();
                  // Ne changez de phase que lorsque la stabilisation est terminée
                  if (!stabilisationEnCours) {
                      Serial.println("Fin de la stabilisation à B");
                      currentPhase = PHASE_3;
                  }
                  break;
              case PHASE_3:
                  WebSerial.println("Phase 3...");
                  Serial.println("Phase 3...");
                  Phase_3();
                  if (abs(zmes - D_z) <= 0.1) {
                      currentPhase = STOP;
                  }
                  break;
              case STOP:
                  WebSerial.println("Mise hors tension...");
                  Serial.println("Mise hors tension...");
                  Arret();
                  missionComplete = true; // La mission est terminée
                  break;
          }
      } 
      else {
          WebSerial.println("Vol terminé.");
          Serial.println("Vol terminé.");
          ledGreenDutyCycle = 0; // LED verte éteinte
          ledRedDutyCycle = 255; // LED rouge à pleine intensité
          generatePWMLed(LED_RED, ledRedDutyCycle);
          display.clearDisplay();
          updateDisplay("Vol termine. Veuillez me debrancher. A bientot !\n");
      }
   }    
}
